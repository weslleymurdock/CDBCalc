name: "Build and Coverage"

on:
  push:
    paths-ignore:
      - '**/*.md'
      - '**/*.gitignore'
      - '**/*.gitattributes'

  pull_request:
    paths-ignore:
      - '**/*.md'
      - '**/*.gitignore'
      - '**/*.gitattributes'

  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x

    - name: Restore
      run: dotnet restore CDBCalc.sln

    - name: Build
      run: dotnet build --configuration Release
  
  test:
    name: Test and Coverage
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.x

    - name: Restore
      run: dotnet restore CDBCalc.sln

    - name: Run tests with coverage
      run: |
        dotnet tool restore

        dotnet test tests/unit/CDBCalculator.Application.UnitTests/CDBCalculator.Application.UnitTests.csproj --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=TestResults/coverage.xml
        dotnet test tests/unit/CDBCalculator.Domain.UnitTests/CDBCalculator.Domain.UnitTests.csproj --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=TestResults/coverage.xml
        dotnet test tests/unit/CDBCalculator.Infrastructure.UnitTests/CDBCalculator.Infrastructure.UnitTests.csproj --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=TestResults/coverage.xml
        dotnet test tests/unit/CDBCalculator.MicroService.UnitTests/CDBCalculator.MicroService.UnitTests.csproj --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=TestResults/coverage.xml
        dotnet test tests/unit/CDBCalculator.ApiGateway.UnitTests/CDBCalculator.ApiGateway.UnitTests.csproj --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=TestResults/coverage.xml

    - name: Generate coverage report + badge
      run: |
        mkdir -p reports
        reportgenerator \
          -reports:"tests/unit/**/**/TestResults/coverage.xml" \
          -targetdir:"reports" \
          -reporttypes:"Html;TextSummary;Badge" \
          -title:"CDBCalculator - Cobertura Consolidada"

    - name: Verificar se é um commit de merge
      id: check_merge
      run: |
        MERGE_COMMIT=$(git rev-parse HEAD)
        PARENTS=$(git rev-list --parents -n 1 $MERGE_COMMIT | wc -w)
        if [ "$PARENTS" -gt 2 ]; then
            echo "merge=true" >> $GITHUB_OUTPUT
        else
            echo "merge=false" >> $GITHUB_OUTPUT

    - name: Publish to GitHub Pages
      if: steps.check_merge.outputs.merge == 'true'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: reports
        publish_branch: gh-pages